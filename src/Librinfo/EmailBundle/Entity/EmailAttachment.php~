<?php

namespace Librinfo\EmailBundle\Entity;

use Symfony\Component\HttpFoundation\File\UploadedFile;
use Librinfo\DoctrineBundle\Entity\Traits\BaseEntity;

/**
 * EmailAttachment
 */
class EmailAttachment
{
    use BaseEntity;

    /**
     * @var string
     */
    private $name;

    /**
     * @var string
     */
    private $mimeType;

    /**
     * @var float
     */
    private $size;

    /**
     * @var \Librinfo\EmailBundle\Entity\Email
     */
    private $email;

    /**
    *@var UploadedFile file
    */
    private $file;

    /**
    *@var DateTime updated
    */
    private $updated;

    /**
    *@var String path
    */
    private $path;

    /**
     * Set path
     *
     * @param string $path
     *
     * @return EmailAttachment
     */
    public function setPath($path)
    {
        $this->path = $path;

        return $this;
    }

    /**
     * Get path
     *
     * @return string
     */
    public function getPath()
    {
        return $this->path;
    }

    /**
     * Set email
     *
     * @param DateTime updated
     *
     * @return updated
     */
    public function setUpdated($updated)
    {
        $this->updated = $updated;

        return $this;
    }

    /**
     * Get updated
     *
     * @return DateTime updated
     */
    public function getUpdated()
    {
        return $this->updated;
    }

    /**
     * Set email
     *
     * @param \Librinfo\EmailBundle\Entity\Email $email
     *
     * @return EmailAttachment
     */
    public function setEmail(\Librinfo\EmailBundle\Entity\Email $email = null)
    {
        $this->email = $email;

        return $this;
    }

    /**
     * Get email
     *
     * @return \Librinfo\EmailBundle\Entity\Email
     */
    public function getEmail()
    {
        return $this->email;
    }

    public function setFile(UploadedFile $file = null)
    {
        $this->file = $file;

        return $this;
    }

    public function getFile()
    {
        return $this->file;
    }

    /**
     * Set name
     *
     * @param string $name
     *
     * @return File
     */
    public function setName($name)
    {
        $this->name = $name;

        return $this;
    }

    /**
     * Get name
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Set mimeType
     *
     * @param string $mimeType
     *
     * @return File
     */
    public function setMimeType($mimeType)
    {
        $this->mimeType = $mimeType;

        return $this;
    }

    /**
     * Get mimeType
     *
     * @return string
     */
    public function getMimeType()
    {
        return $this->mimeType;
    }

    /**
     * Set size
     *
     * @param float $size
     *
     * @return File
     */
    public function setSize($size)
    {
        $this->size = $size;

        return $this;
    }

    /**
     * Get size
     *
     * @return float
     */
    public function getSize()
    {
        return $this->size;
    }

    /**
     * Lifecycle callback to upload the file to the server
     */
    public function lifecycleFileUpload()
    {
        $this->upload();
    }

    /**
     * Updates the hash value to force the preUpdate and postUpdate events to fire
     */
    public function refreshUpdated()
    {
        $this->setUpdated(new \DateTime());
    }

    /**
    * Hydrates attachment object with file info then moves the file to upload dir
    */
    public function upload()
    {
        $file = $this->getFile();

        if (null != $file) {

            $this->size = $file->getClientSize();
            $this->name = $file->getClientOriginalName();
            $this->mimeType = $file->getMimeType();
            $this->path = sha1(uniqid(mt_rand(), true)).'.'.$file->guessClientExtension();

            // if there is an error when moving the file, an exception will
            // be automatically thrown by move(). This will properly prevent
            // the entity from being persisted to the database on error
            $file->move(__DIR__.'/../../../../web/uploads/attachments', $this->getPath());

            $this->file = null;
        }
    }

    public function removeUpload()
    {
        $file = __DIR__.'/../../../../web/uploads/attachments'.'/'.$this->getPath();
        if ($file) {
            unlink($file);
        }
    }
}
